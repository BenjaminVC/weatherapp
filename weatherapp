#!/usr/bin/env bash
# TODO: add user-agent for NWS 

# constants
RED='\033[0;31m'
GREEN='\033[1;32m'
NC='\033[0;00m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'

check_user () {
USER=/home/ben/weatherappprefs.txt
local retval=0
if [ -f $USER ]; then 
	retval=1
	echo $retval
else
	echo $retval
fi	
}

initial_setup () {
USERPREFS=/home/ben/weatherappprefs.txt
if [ -f "$USERPREFS" ]; then
	echo "OVERWRITE existing preferences?"
	printf '\n'
	read -p "[y/n] " userChoice
	if [ "$userChoice" == "y" ]; then
		rm -i -v weatherappprefs.txt
		initial_setup
	else
		echo "user preferences not changes"
	fi
else
	echo "Welcome to the weatherapp initial user setup."
	printf '\n\n\n\n\n\n'
	read -p "press enter to continue..."
	clear
	echo "weatherapp uses latitudinal and longitudinal geographic coordinates to 	access accurate weather information, provided by the NWS."
	printf '\n\n\n\n\n\n'
	echo "enter 'y' to allow the use of location information" 
	read -p "[y/n] " allowLocation
	printf '\n\n\n'
	echo "step [1/4] "
	if [ "allowLocation" == "y" ]; then
		echo "Location permissions ${GREEN}accepted${NC}"		
		$allowLocation="locPermission = 1" | echo "$allowLocation" > 		$USERPREFS
		echo "step [1/4] "
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	else
		$allowLocation="locPermission = 0" | echo "$allowLocation" > 		$USERPREFS
		# force weatherapp to ask for longitude and latitude in this case
		echo "Location permissions ${RED}denied${NC}"
		echo "step [1/4] "
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	fi
	echo "Enable weatherapp to change terminal colors and themes based on time 		of day?" 
	read -p "[y/n] " allowTheme
	if [ "$allowTheme" == "y" ]; then
		$allowTheme="themePermissions = 1" | echo "$allowTheme" > $USERPREFS
		echo "Colors and themes ${GREEN}enabled${NC}" 
		echo "step [2/4] "
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	else
		$allowTheme="themePermissions = 0" | echo "$allowTheme" > $USERPREFS
		echo "Colors and themes ${RED}disabled${NC}"
		echo "step [2/4] "
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	fi
	echo "Enable quickrun so that when weatherapp starts, it will immediately 		display the current forecast?" 
	read -p "[y/n] " allowQuickrun
	if [ "$allowQuickrun" == "y" ]; then 
		$allowQuickrun="quickrunPermissions = 1" | echo "$allowQuickrun" > 			$USERPREFS
		echo "quickrun ${GREEN}enabled${NC}" 
		echo "step [3/4] "
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	else
		$allowQuickrun="quickrunPermissions = 0" | echo "$allowQuickrun" > 			$USERPREFS
		echo "quickrun ${RED}disabled${NC}"
		echo "step [3/4] "
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	fi
	userDegrees="Farenheit"
	echo "The default unit of measurement for temperature is set to 			$userDegrees, do you want to save these changes?"
	printf '\n\n'
	echo "Enter 'y' to save changes or 'n' to switch to Celcius"
	read -p "[y/n] " allowFarenheit
	if [ "$allowFarenheit" == "y" ]; then
		$allowFarenheit="farenheit = 1" | echo "$allowFarenheit" > $USERPREFS
		echo "Farenheit ${GREEN}enabled${NC}" 
		echo "step [4/4] "
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	else
		$allowFarenheit="farenheit = 0" | echo "$allowFarenheit" > $USERPREFS
		echo "Farenheit ${RED}disabled${NC}" 
		echo "step [4/4] "
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	echo "Initial setup complete!"
	printf '\n\n\n\n'
	read -p "press enter to return to the MAIN-MENU"
	fi
fi
main_menu
}

#TODO: grep USERPREFS file to view and change initialized settings in terminal window 
main_menu() {
clear
echo "                             weatherapp MAIN-MENU"
printf '\n\n'
echo "Enter the corresponding number to select from the given options: "
printf '\n'
echo "1. User configuration file"
echo "2. Color and display"
echo "3. Quick view"
echo "4. Update weather"
echo "5. return to forecast view"

read mainMenuOption
case $mainMenuOption in
1)
	clear
	echo "User configuration file options"
	printf '\n\n\n'
	if [ -f weatherappprefs.txt ]; then
		echo "Would you like to remove current user-configuration file?"
		printf '\n\n\n\n'
		read -p "[y/n] " userConfigChoice
		if [ "$userConfigChoice" == "y" ]; then 
			rm -i weatherappprefs.txt
		else
			echo "user confifuration file was not removed"
		fi
	else 
		echo "User configuration file not found, running initial setup..."
		initial_setup
	fi
	;;
2)
	clear
	echo "Color and display options"
	;;
3)
	clear
	echo "Quick view options"
	;;
4)
	clear
	check_status
	;;
5)
	clear
	display_forecast
	;;
*)
	clear
	main_menu
esac
}
	
	
check_status () {		
FILE=/home/ben/weatherappinfo.txt
lastUpdated=$(get_time_stamp)
printf '\n\n\n\n'
if [ -f "$FILE" ]; then 
	echo "$FILE last fetched at $lastUpdated"
	printf '\n\n\n\n\n\n\n\n\n'
	echo "Update existing weather info?"
	printf '\n'
	read -p "[y/n] " userChoice
	if [ "$userChoice" == "y" ]; then
		set_weather_info
		if [$(grep '"status": 404' weatherinfo.txt)]; then
			echo "404... coordinates likely not supported."
		else
			echo "$FILE updated."
		fi
		clear
	else
		clear
		echo "$FILE not changed, using stored location information."
		
	fi
else 
	"$FILE does not exist, fetching info from weather.gov"
	set_weather_info 
fi
display_forecast
}

display_forecast () {
#time_of_day_gfx
userForecast=$(get_forecast)
userHourlyForecast=$(get_hourly_forecast)
userLoc=$(get_user_loc)
timeStamp=$(get_time_stamp)

nwsOffice=$(grep -m1 '"cwa": ..' weatherappinfo.txt | sed 's/^...............//')
echo "Fetched weather at $timeStamp"
echo "from NWS office $nwsOffice at points: $userLoc " | sed 's/"//g'
printf '\n\n'

userCity=$(grep -m2 '"city": ..' weatherappinfo.txt | sed 's/"//g' | sed 's/^....................//' | sed 's/.$//' | sed 's/: //' | sed 's/addressLocality//g')
echo "your NWS office location is: $userCity" 
printf '\n\n'

echo "your hourly forecast link is: " 
echo -e "${BLUE}$userHourlyForecast${NC}"
printf '\n\n'

temp=$(grep -o -m1 '"temperature": ..' weatherappinfohourlyforecast.txt) 
degreesInF="° F"
degreesInC="° C"

echo "Current $temp$degreesInF" | sed 's/"//g'

printf '\n'
read -p "press enter to exit or type m to go to main-menu: " userChoice
if [ "$userChoice" == "m" ]; then 
	main_menu
fi
}

time_of_day_gfx () {
local isDayTime=$(grep -m1 '"isDaytime": ..' weatherappinfoforecast.txt | sed 's/"//g' | sed 's/^...........................//' | sed 's/.$//')
hourNow=$(get_date | sed 's/^................//' |cut -c1-2)
meridianPosition=$(get_date | sed 's/^.........................//' |cut -c1-2)
if [ "$meridianPosition" == "AM" ] && [ "$hourNow" < "18" ]; then
echo -e "${YELLOW} 		                                                      .     ."
echo -e "   		                                                       .###."
echo -e "		                                                   - - #  # - -"
echo -e "  	                                                              .###."
echo -e "  		                                                     .     ."
echo -e "${NC}"
else
isDayTime="false"
echo -e "                                      			                \\\`"
echo -e "                                                                          |"
echo -e "                                                                        /,"
echo -e "                                                                         "
echo -e "                                                                         "
fi
}

get_date() {
var=$(date)
local retval=$(date)
echo "$retval"
}

set_time_stamp () {
timeStamp=$(get_date)
DATEFILE=/home/ben/weatherapptimestamp.txt 
echo "$timeStamp" > $DATEFILE
local retval=$(<$DATEFILE)
echo "$retval"
}

get_time_stamp () {
DATEFILE=/home/ben/weatherapptimestamp.txt 
local retval=$(<$DATEFILE)
echo "$retval"
}

set_weather_info () {
echo "Allow weatherapp to use location information? "
read -p "[y/n] " userChoice
	if [ "$userChoice" == "y" ]; then
		set_time_stamp
		clear
		userLoc=$(curl ipinfo.io | grep '"loc": ' | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g')
	else 
		return[n]
	fi
	
	curl https://api.weather.gov/points/$userLoc -o "weatherappinfo.txt"
	userForecast=$(grep '"forecast": ' weatherappinfo.txt | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g')
	echo $userCity
}

#returns string value of last saved coordinates
get_user_loc () { 
local retval=$(grep '"id": ' weatherappinfo.txt | sed 's/[^0-9,]//g' | sed -r 's/\s+//g' | sed 's/.$//')
echo "$retval"
}

#returns string value of nws forecast api link, relevant to current user location
get_forecast () {
local retval=$(grep '"forecast": ' weatherappinfo.txt | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g' | sed 's/^........//')
echo $retval
}

get_hourly_forecast () {
local retval=$(grep '"forecastHourly": ' weatherappinfo.txt | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g' | sed 's/^..............//')
echo $retval
}

get_weather_info () { 
userLoc=$(grep '"id": ' weatherappinfo.txt | sed 's/[^0-9,]//g' | sed -r 's/\s+//g' | sed 's/.$//')

curl https://api.weather.gov/points/$userLoc -o "weatherappinfo.txt"

userForecast=$(grep '"forecast": ' weatherappinfo.txt | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g')
}

#######################################################################################
#while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-11));echo -e "\e[31m`date +%r`\e[39m";tput rc;done &
#######################################################################################

clear


userAuth=$(check_user)
timeOfDay=$(time_of_day_gfx)
if [ $userAuth ]; then
	time_of_day_gfx
	if [ "$timeOfDay" == true ]; then
		echo "Welcome back to weatherapp!"
		printf '\n\n'
	else
		echo "Keeping it quiet..."
		printf '\n\n'
	fi
display_forecast
else
	echo "Welcome to weatherapp, let's get started."
	printf '\n\n\n\n'
	read -p "press enter to continue..."
	clear
	initial_setup
fi
	




#TODO: rename file
FILE2=/home/ben/weatherappinfoforecast.txt
curl -s $userForecast -o weatherappinfoforecast.txt

#TODO: rename file
FILE3=/home/ben/weatherappinfohourlyforecast.txt
curl -s $userHourlyForecast -o weatherappinfohourlyforecast.txt



echo -e "${GREEN}exit 0${NC}\n\n\n"


exit 0
