#!/usr/bin/env bash
# TODO: add user-agent for NWS 

# constants
RED='\033[0;31m'
GREEN='\033[1;32m'
NC='\033[0;00m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'

time_stamp () {
timeStamp=$(./datefunction)
DATEFILE=/home/ben/weatherapptimestamp.txt | cat "$timeStamp"
local retval=$(echo "$DATEFILE")
echo "$retval"
}

set_weather_info () {
echo "Allow weatherapp to use location information? "
read -p "[y/n] " userChoice
	if [ "$userChoice" == "y" ]; then
		time_stamp
		clear
		userLoc=$(curl ipinfo.io | grep '"loc": ' | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g')
	else 
		return[n]
	fi
	
	curl https://api.weather.gov/points/$userLoc -o "weatherappinfo.txt"
	userForecast=$(grep '"forecast": ' weatherappinfo.txt | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g')
	echo $userCity
}

#returns string value of last saved coordinates
get_user_loc () { 
local retval=$(grep '"id": ' weatherappinfo.txt | sed 's/[^0-9,]//g' | sed -r 's/\s+//g' | sed 's/.$//')
echo "$retval"
}

#returns string value of nws forecast api link, relevant to current user location
get_forecast () {
local retval=$(grep '"forecast": ' weatherappinfo.txt | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g' | sed 's/^........//')
echo $retval
}

get_hourly_forecast () {
local retval=$(grep '"forecastHourly": ' weatherappinfo.txt | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g' | sed 's/^..............//')
echo $retval
}

get_weather_info () { 
userLoc=$(grep '"id": ' weatherappinfo.txt | sed 's/[^0-9,]//g' | sed -r 's/\s+//g' | sed 's/.$//')

curl https://api.weather.gov/points/$userLoc -o "weatherappinfo.txt"

userForecast=$(grep '"forecast": ' weatherappinfo.txt | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g')
}

#while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-11));echo -e "\e[31m`date +%r`\e[39m";tput rc;done &

clear
echo -e "Welcome to weatherapp${YELLOW} 		                                      .     ."
echo -e "   		                                                       .###."
echo -e "		                                                   - - #  # - -"
echo -e "  	                                                              .###."
echo -e "  		                                                     .     ."
echo -e "${NC}"


#TODO: rename file
FILE=/home/ben/weatherappinfo.txt
lastUpdated=$(time_stamp)
printf '\n\n\n\n\n\n\n'
if [ -f "$FILE" ]; then 
	echo "$FILE last fetched at " | echo "$lastUpdated"
	printf '\n\n\n\n\n\n'
	echo "Update existing weather info? (Choosing 'n' displays "
	printf '\n'
	read -p "[y/n] " userChoice
	if [ "$userChoice" == "y" ]; then
		set_weather_info
		if [$(grep '"status": 404' weatherinfo.txt)]; then
			echo "404... coordinates likely not supported."
		else
			echo "$FILE updated."
		fi
		clear
	else
		clear
		echo "$FILE not changed, using stored location information."
		
	fi
else 
	"$FILE does not exist, fetching info from weather.gov"
	set_weather_info 
fi

userForecast=$(get_forecast)
userHourlyForecast=$(get_hourly_forecast)
userLoc=$(get_user_loc)

#TODO: rename file
FILE2=/home/ben/weatherappinfoforecast.txt
curl $userForecast -o weatherappinfoforecast.txt

#TODO: rename file
FILE3=/home/ben/weatherappinfohourlyforecast.txt
curl $userHourlyForecast -o weatherappinfohourlyforecast.txt

clear

#TODO: add datefunction to weatherapp to avoid permission executable issues

nwsOffice=$(grep -m1 '"cwa": ..' weatherappinfo.txt | sed 's/^...............//')
echo "Fetched weather at $timeStamp"
echo "from NWS office $nwsOffice at points: $userLoc " | sed 's/"//g'
printf '\n\n'

userCity=$(grep -m2 '"city": ..' weatherappinfo.txt | sed 's/"//g' | sed 's/^....................//' | sed 's/.$//' | sed 's/: //' | sed 's/addressLocality//g')
echo "your location is: $userCity" 
printf '\n\n'

echo "your hourly forecast link is: " 
echo -e "${BLUE}$userHourlyForecast${NC}"
printf '\n\n'

temp=$(grep -o -m1 '"temperature": ..' weatherappinfohourlyforecast.txt) 
degreesInF="° F"
degreesInC="° C"

echo "Current $temp$degreesInF" | sed 's/"//g'
printf '\n\n'
echo -e "${GREEN}exit 0${NC}\n\n\n"


exit 0
