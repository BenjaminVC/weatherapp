#!/usr/bin/env bash 

# constants
USERAGENT="weatherapp for linux terminal, benvancise@gmail.com"
RED='\033[0;31m'
GREEN='\033[1;32m'
NC='\033[0;00m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
ARROWUP='\e[A'
ARROWDOWN='\e[B'
ARROWRIGHT='\e[C'
ARROWLEFT='\e[D'
F1='\eOP'
F3='\eOR'
F5='\e[15~'
F12='\e[24~'
EXITTRUE=0
EXITFALSE=1

# Checks if a user configuration file has been created, returns 1 if found
check_user () {
USER=$workingDirectory/weatherappprefs.txt
local retval=0
if [ -f $USER ]; then 
	retval=1
	echo $retval
else
	echo $retval
fi	
}

ReadKey() {

  if read -sN1 -p "[F1] to go main-menu, [F12] to quit, or [F3] to toggle help on/off" KEY; then
    while read -sN1 -t 0.001 ; do
      KEY+="${REPLY}" 
     
    done
  fi
}

get_temp () {
number=$(get_forecast_number)
local temp=$(grep -m${number} '"temperature": ..' weatherappinfohourlyforecast.txt | sed 's/^...............................//' | cut -c1-2 | tail -n1)
echo $temp
}

initial_setup () {
USERPREFS=$workingDirectory/weatherappprefs.txt
if [ -f "$USERPREFS" ]; then
	echo "OVERWRITE existing preferences?"
	printf '\n'
	read -n3 -p "[y/n] " userChoice
	if [ "$userChoice" == "y" ]; then
		rm -i -v weatherappprefs.txt
		main_menu
	else
		echo "user configuration not changed"
	fi
else
echo -e "		${BLUE}             weatherapp Initial Setup${NC}                 step [1/4]"

	printf '\n\n\n\n\n\n'
	echo "Welcome to the weatherapp initial user setup."
	printf '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'
	read -n3 -p "press enter to continue..."
	clear
	echo -e "		${BLUE}             weatherapp Initial Setup${NC}                 step [1/4]"
	printf '\n\n\n'
	echo "weatherapp uses latitudinal and longitudinal geographic coordinates to access"
	echo "accurate weather information, provided by the NWS."
	printf '\n\n\n\n\n\n\n\n\n'
	echo "enter 'y' to allow weatherapp to use location information" 
	read -n3 -p "[y/n] " allowLocation
	printf '\n\n'
	
	if [ "$allowLocation" == "y" ]; then
		echo -e "Location permissions ${GREEN}accepted${NC}"		
		userAllowGeoLocation="geoLocationPermissions = 1" 
		echo "$userAllowGeoLocation" >> $USERPREFS
		printf '\n\n\n'
		set_coords
		set_location_link
		update_hourly_forecast
		set_time_stamp_date
		set_time_stamp_hour
		read -n3 -p "press enter to continue..."
		clear
	else
		userAllowGeoLocation="geoLocationPermissions = 0" 
		echo "$userAllowGeoLocation" >> $USERPREFS
		# force weatherapp to ask for longitude and latitude in this case
		echo -e "Location permissions ${RED}denied${NC}"
		printf '\n\n\n'
		read -n3 -p "press enter to continue..."
		clear
	fi
	echo -e "		${BLUE}             weatherapp Initial Setup${NC}                 step [2/4]"
	printf '\n\n'
	echo "Enable weatherapp to change terminal colors and themes based on time of day?" 
	read -n3 -p "[y/n] " allowTheme
	if [ "$allowTheme" == "y" ]; then
		userAllowTheme="allowTheme = 1" 
		echo "$userAllowTheme" >> $USERPREFS
		echo -e "Colors and themes ${GREEN}enabled${NC}" 
		printf '\n\n\n\n\n\n\n\n\n'
		
		
		read -n3 -p "press enter to continue..."
		
		clear
	else
		userAllowTheme="allowTheme = 0" 
		echo "$userAllowTheme" >> $USERPREFS
		echo -e "Colors and themes ${RED}disabled${NC}"
		
		printf '\n\n\n'
		read -n3 -p "press enter to continue..."
		clear
	fi
	echo -e "		${BLUE}             weatherapp Initial Setup${NC}                 step [3/4]"
	printf '\n\n'
	echo "Enable quickrun so that when weatherapp starts, it will immediately display the current forecast?" 
	printf '\n\n'
	read -n3 -p "[y/n] " allowQuickrun
	if [ "$allowQuickrun" == "y" ]; then 
		userQuickRun="allowQuickRun = 1" 
		echo "$userQuickRun" >> $USERPREFS
		echo -e "quickrun ${GREEN}enabled${NC}" 
		printf '\n\n\n\n\n\n\n'
		read -n3 -p "press enter to continue..."
		clear
	else
		userQuickRun="allowQuickRun = 0" 
		echo "$userQuickRun" >> $USERPREFS
		echo -e "quickrun ${RED}disabled${NC}"
		printf '\n\n\n'
		read -n3 -p "press enter to continue..."
		clear
	fi
	echo -e "		${BLUE}             weatherapp Initial Setup${NC}                 step [4/4]"
	printf '\n\n'
	userDegrees="Farenheit"
	echo "The default unit of measurement for temperature is set to $userDegrees, do you want to save these changes?"
	printf '\n\n'
	echo "Enter 'y' to save changes or 'n' to switch to Celcius"
	read -n3 -p "[y/n] " allowFarenheit
	if [ "$allowFarenheit" == "y" ]; then
		userAllowFarenheit="farenheit = 1" 
		echo "$userAllowFarenheit" >> $USERPREFS
		echo -e "Farenheit ${GREEN}enabled${NC}" 
		echo "step [4/4] "
		printf '\n\n\n\n\n\n\n\n\n\n'
		read -n3 -p "press enter to continue..."
		clear
	else
		userAllowFarenheit="farenheit = 0" 
		echo "$userAllowFarenheit" >> $USERPREFS
		echo -e "Farenheit ${RED}disabled${NC}" 
		echo "step [4/4] "
		printf '\n\n\n'
		read -n3 -p "press enter to continue..."
		clear
	echo "Initial setup complete!"
	printf '\n\n\n\n'
	read -n3 -p "press enter to return to the MAIN-MENU"
	fi
fi
main_menu
}

#TODO: grep USERPREFS file to view and change initialized settings in terminal window 
main_menu() {
clear
echo -e "			${BLUE}       weatherapp MAIN-MENU${NC}"
printf '\n\n'
printf '\n\n'
echo "1. Update weather"
echo "2. Keybindings"
echo "3. About"
echo "4. User configuration file"
echo -e "5. ${BLUE}weatherapp live-view${NC}"
printf '\n\n\n'
read -n3 -p "Enter the corresponding number to select from the given menu options:  " mainMenuOption
case $mainMenuOption in
1)
	printf '\n\n\n\n\n\n\n\n'
	echo -e "weatherapp forecast info ${GREEN}successfully${NC} updated."
	sleep 2
	set_weather_info_fast
	main_menu
	;;
	
2)
	clear
	echo -e "			${BLUE}     Forecast view Keybindings${NC}"
	printf '\n\n\n\n\n\n'
	echo -e "'${BLUE}Up-arrow${NC}'    : Increment advanced-forecast view day"
	printf '\n'
	echo -e "'${BLUE}Down-arrow${NC}'  : Decrement advanced-forecast view day"
	printf '\n'
	echo -e "'${BLUE}Right-arrow${NC}' : Increment advanced-forecast view hour"
	printf '\n'
	echo -e "'${BLUE}Left-arrow${NC}'  : Decrement advanced-forecast view hour"
	printf '\n'
	echo -e "'${BLUE}Enter${NC}'       : Update and display live-forecast view"
	printf '\n\n\n\n\n\n\n'
	read -n3 -p "press 'enter' to return to main-menu"
			main_menu
	;;
3)
	clear
	echo -e "			${BLUE}       About weatherapp${NC}"
	printf '\n\n\n'
	echo "weatherapp is a live application (updated every 15 minutes) for the linux "
	echo "terminal that uses latitudinal and longitudinal geographic coordinates to "
	echo "access accurate weather information, provided by the NWS."
	printf '\n\n\n\n'
	echo "weatherapp also allows for viewing advanced forecast information. "
	echo "To view advanced forecasts, from the weatherapp live-view, "
	echo "simply use the arrow-keys to navigate by hour and/or day."
	printf '\n\n\n\n\n\n\n\n\n'
	read -n3 -p "press enter to return to main-menu"
			main_menu
	;;
4)
	clear
	echo -e "			${BLUE}       User configuration options${NC}"
	printf '\n\n'
	if [ -f weatherappprefs.txt ]; then
		echo "Would you like to remove current user-configuration file?"
		printf '\n\n\n\n'
		read -n3 -p "[y/n] " userConfigChoice
		if [ "$userConfigChoice" == "y" ]; then 
			clear
			echo "Are you sure? weatherapp will need to be reconfigured after removing the current user-configuration file."
			printf '\n\n'
			echo "Enter 'y' again to confirm"
			printf '\n\n\n'
			rm -i weatherappprefs.txt
			clear
			main_menu
		else
			printf '\n\n\n\n\n'
			read -n3 -p "user confifuration file was not removed, press enter to return to MAIN-MENU"
			main_menu
		fi
	else 
		echo -e "User configuration file ${RED}not found${NC}, running initial setup..."
		printf '\n\n'
		sleep 2
		clear
		initial_setup
	fi
	;;
5)	
	clear
	display_forecast_live
	;;
*)	
	display_forecast_live
	;;
esac
}
		
check_status () {
FILE="$workingDirectory/weatherappinfo.txt"
lastUpdated=$(get_time_stamp_date | sed 's/^.....//' | sed 's/-//g')
currentDate=$(get_date | sed 's/^.....//' | sed 's/-//g')
userAuth=$(check_user)
if [ $userAuth ]; then 
	
	clear
	echo -e "${BLUE}$FILE${NC} found, downloading forecast information..."
	sleep 2
	set_weather_info_fast
	
else
s	"$FILE does not exist, fetching info from weather.gov"
	set_weather_info 
fi
}

display_controls () {
printf '\n\n'

	echo -e "[${BLUE}Up-arrow${NC}]   [${BLUE}Down-arrow${NC}]   [${BLUE}Right-arrow${NC}]   [${BLUE}Left-arrow${NC}]          [${BLUE}F5${NC}]"   
	echo -en "  +1 day        -1 day          +1 hour        -1 hour     refresh live-view"
read -s -r -n3 uI
if [ $(echo -n "$uI" | grep "$F3") ]; then
	showKeys="false"
fi
display_forecast_live
}

user_refresh_live_view () {
if [ $f5Press -eq 1 ]; then
	local arg1=1
	echo $arg1
	set_weather_info_fast
	
else
	local arg1=0
	echo $arg1
fi
}

refresh_live_view () {
	set_weather_info_fast
	display_forecast_live
}

forecast_user_prompt () { 

DEBUG=$workingDirectory/weatherappdebug.txt

while ReadKey ; do
  case "${KEY}" in
    $'\eOP')   
     main_menu;;
    $'\eOR')
     display_controls;;
    $'\e[24~') 
    exit 0;;
    $'\e[15~') 
    f5Press=1
    set_weather_info_fast;;
    $'\e[A') 
    	currentForecastNumber=$((currentForecastNumber+24))
	userInputValue=$((userInputValue+24))
	display_advance_forecast;;
    $'\e[B') 
    	currentForecastNumber=$((currentForecastNumber-24))
	userInputValue=$((userInputValue-24))
	display_advance_forecast;;
    $'\e[C') 
    	currentForecastNumber=$((currentForecastNumber+1))
	userInputValue=$((userInputValue+1))
	display_advance_forecast;;
    $'\e[D') 
    	currentForecastNumber=$((currentForecastNumber-1))
	userInputValue=$((userInputValue-1))
	display_advance_forecast;;
    *) 
    	display_forecast_live;;
  esac
done
}

get_forecast_number () {
i=1
j=$i
tempNotFound=1
local foreCastNumber=0
dateNotFound=1
timeSpanNotFound=1
currentDate=$(date +"%Y-%m-%d")
currentTime=$(date +"%H:%M")
hourlyForeCastTime="$currentDate"T"$currentTime"
hourlyForeCastStartTimeHour=$(grep -m${i} '"startTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/^......................................//' | cut -c1-2 | tail -n1)
hourlyForeCastEndTimeHour=$(grep -m${i} '"endTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/^....................................//' | cut -c1-2 | tail -n1)
hourlyForeCastTimeHour=$(echo $hourlyForeCastTime | sed 's/^...........//' | cut -c1-2)
hourlyForeCastTimeMinutes=$(echo $hourlyForeCastTime | sed 's/^..............//' | cut -c1-2)
while [ $tempNotFound -eq 1 ]
do	
	while [ $dateNotFound -eq 1 ] 
	do
	hourlyForeCastDate=$(grep -m${i} '"startTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/startTime//g' | sed 's/endTime//g' | sed 's/://g' | tail -n1  | sed s'/^.................//' | cut -c1-10)
		if [ "$currentDate" == "$hourlyForeCastDate" ]; then
		j=$i
			dateNotFound=0
		else
			((i++))
		fi	
	done		
hourlyForeCastStartTimeHour=$(grep -m${j} '"startTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/^......................................//' | cut -c1-2 | tail -n1)
hourlyForeCastEndTimeHour=$(grep -m${j} '"endTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/^....................................//' | cut -c1-2 | tail -n1)
	if [ $hourlyForeCastStartTimeHour -le $hourlyForeCastTimeHour ] && [ $hourlyForeCastTimeHour -le $hourlyForeCastEndTimeHour ]; then
			foreCastNumber=$j
			tempNotFound=0
	else
			((j++))
	fi	
done
echo $foreCastNumber
}

current_date () {
local currentDate=$(date +"%Y-%m-%d")
echo $currentDate
}

current_hour () {
local currentTime=$(date +"%H:%M")
echo "$currentTime"
}

get_temp () {
number=$(get_forecast_number)
local temp=$(grep -m${number} '"temperature": ..' weatherappinfohourlyforecast.txt | sed 's/^...............................//' | cut -c1-2 | tail -n1)
echo $temp
}

get_daytime () {
number=$(get_forecast_number)
local dayTime=$(grep -m${number} '"isDaytime": ..' weatherappinfohourlyforecast.txt | sed 's/^.............................//' | tail -n1 | sed 's/,//g')
echo $dayTime
}

get_windspeed () {
number=$(get_forecast_number)
local windSpeed=$(grep -m${number} '"windSpeed": ..' weatherappinfohourlyforecast.txt | sed 's/^..............................//' | cut -c1-2 | tail -n1 | sed 's/,//g')
echo $windSpeed
}

get_winddirection () {
number=$(get_forecast_number)
local windDirection=$(grep -m${number} '"windDirection": ..' weatherappinfohourlyforecast.txt | sed 's/^..................................//' | cut -c1-3 | tail -n1 | sed 's/,//g' | sed 's/"//g')
case $windDirection in
N)
	windDirection="blowing from the ${BLUE}North${NC}"
	;;
E)
	windDirection="blowing from the ${BLUE}East${NC}"
	;;
S)
	windDirection="blowing from the ${BLUE}South${NC}"
	;;
W)
	windDirection="blowing from the ${BLUE}West${NC}"
	;;
NE)
	windDirection="blowing from the ${BLUE}North-East${NC}"
	;;
SE)
	windDirection="blowing from the ${BLUE}South-East${NC}"
	;;
SW)
	windDirection="blowing from the ${BLUE}South-West${NC}"
	;;
NW)
	windDirection="blowing from the ${BLUE}North-West${NC}"
	;;
NNE)
	windDirection="blowing from the ${BLUE}North-Northeast${NC}"
	;;
ENE)
	windDirection="blowing from the ${BLUE}East-Northeast${NC}"
	;;
ESE)
	windDirection="blowing from the ${BLUE}East-Southeast${NC}"
	;;
SSE)
	windDirection="blowing from the ${BLUE}South-Southeast${NC}"
	;;
SSW)
	windDirection="blowing from the ${BLUE}South-Southwest${NC}"
	;;
WSW)
	windDirection="blowing from the ${BLUE}West-Southwest${NC}"
	;;
WNW)
	windDirection="blowing from the ${BLUE}West-Northwest${NC}"
	;;
NNW)
	windDirection="blowing from the ${BLUE}North-Northwest${NC}"
	;;
VAR)
	windDirection="with ${BLUE}variable wind direction${NC}"
	;;
CLM)
	windDirection="with ${BLUE}calm winds${NC}"
	;;
ALL)
	windDirection="at ${BLUE}all direction categories combined${NC}"
	;;
esac
echo $windDirection
}

get_short_forecast () {
number=$(get_forecast_number)
local shortForecast=$(grep -m${number} '"shortForecast": ..' weatherappinfohourlyforecast.txt | sed 's/^..................................//' | tail -n1 | sed 's/,//g' | sed 's/"//g' | sed 's/[{}]//g')
echo $shortForecast
}

custom_forecast_temp () { 
number=$currentForecastNumber
local temp=$(grep -m${number} '"temperature": ..' weatherappinfohourlyforecast.txt | sed 's/^...............................//' | cut -c1-2 | tail -n1)
echo $temp
}

custom_daytime () {
number=$currentForecastNumber
local dayTime=$(grep -m${number} '"isDaytime": ..' weatherappinfohourlyforecast.txt | sed 's/^.............................//' | tail -n1 | sed 's/,//g')
echo $dayTime
}

custom_hour () {
number=$currentForecastNumber
local hourlyForeCastStartTimeHour=$(grep -m${number} '"startTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/^......................................//' | cut -c1-5 | tail -n1)
echo $hourlyForeCastStartTimeHour
}

custom_day () {
number=$currentForecastNumber
local hourlyForeCastDate=$(grep -m${number} '"startTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/startTime//g' | sed 's/endTime//g' | sed 's/://g' | tail -n1  | sed s'/^.................//' | cut -c1-10)
echo $hourlyForeCastDate
}

custom_winddirection () {
number=$currentForecastNumber
local windDirection=$(grep -m${number} '"windDirection": ..' weatherappinfohourlyforecast.txt | sed 's/^..................................//' | cut -c1-3 | tail -n1 | sed 's/,//g' | sed 's/"//g')
case $windDirection in
N)
	windDirection="blowing from the ${BLUE}North${NC}"
	;;
E)
	windDirection="blowing from the ${BLUE}East${NC}"
	;;
S)
	windDirection="blowing from the ${BLUE}South${NC}"
	;;
W)
	windDirection="blowing from the ${BLUE}West${NC}"
	;;
NE)
	windDirection="blowing from the ${BLUE}North-East${NC}"
	;;
SE)
	windDirection="blowing from the ${BLUE}South-East${NC}"
	;;
SW)
	windDirection="blowing from the ${BLUE}South-West${NC}"
	;;
NW)
	windDirection="blowing from the ${BLUE}North-West${NC}"
	;;
NNE)
	windDirection="blowing from the ${BLUE}North-Northeast${NC}"
	;;
ENE)
	windDirection="blowing from the ${BLUE}East-Northeast${NC}"
	;;
ESE)
	windDirection="blowing from the ${BLUE}East-Southeast${NC}"
	;;
SSE)
	windDirection="blowing from the ${BLUE}South-Southeast${NC}"
	;;
SSW)
	windDirection="blowing from the ${BLUE}South-Southwest${NC}"
	;;
WSW)
	windDirection="blowing from the ${BLUE}West-Southwest${NC}"
	;;
WNW)
	windDirection="blowing from the ${BLUE}West-Northwest${NC}"
	;;
NNW)
	windDirection="blowing from the ${BLUE}North-Northwest${NC}"
	;;
VAR)
	windDirection="with ${BLUE}variable wind direction${NC}"
	;;
CLM)
	windDirection="with ${BLUE}calm winds${NC}"
	;;
ALL)
	windDirection="at ${BLUE}all direction categories combined${NC}"
	;;
esac
echo $windDirection
}

custom_windspeed () {
number=$currentForecastNumber
local windSpeed=$(grep -m${number} '"windSpeed": ..' weatherappinfohourlyforecast.txt | sed 's/^..............................//' | cut -c1-2 | tail -n1 | sed 's/,//g')
echo $windSpeed
}

custom_short_forecast () {
number=$currentForecastNumber
local shortForecast=$(grep -m${number} '"shortForecast": ..' weatherappinfohourlyforecast.txt | sed 's/^..................................//' | tail -n1 | sed 's/,//g' | sed 's/"//g' | sed 's/[{}]//g')
echo $shortForecast
}

display_advance_forecast () {
clear
if [ $currentForecastNumber -ge 156 ]; then
	echo -en "\007"
	currentForecastNumber=156
	userInputValue=$currentForecastNumber
elif [ $currentForecastNumber -lt 1 ]; then
	echo -en "\007"
	currentForecastNumber=1
	userInputValue=$currentForecastNumber
fi
userLoc=$(get_coords)
customHour=$(custom_hour)
customDay=$(custom_day)
dayTime=$(custom_daytime) 
echo -e -en "               Displaying forecast data for ${BLUE}$customDay${NC} at ${BLUE}$customHour${NC}"
custom_time_of_day_gfx
printf '\n'
userCwa=$(grep '"cwa": ..' weatherappinfo.txt | sed 's/^...............//' | sed 's/,//g')
userCity=$(grep '"city": ..' weatherappinfo.txt | sed 's/"//g' | sed 's/^....................//' | sed 's/.$//' | sed 's/: //' | tail -n1)
userState=$(grep '"state": ..' weatherappinfo.txt | sed 's/"//g' | sed 's/^.....................//' | sed 's/.$//' | sed 's/: //' | tail -n1)
echo -e "your local NWS office is located in: ${BLUE}$userCity${NC}, ${BLUE}$userState${NC}" 
printf '\n'
echo -e "your local CWA is: ${BLUE}$userCwa${NC}, at points: ${BLUE}$userLoc${NC}" | sed 's/"//g'
printf '\n\n\n'
temp=$(custom_forecast_temp)
degreesInF="° F"
degreesInC="° C"
windSpeed=$(custom_windspeed)
windSpeedInMph="$windSpeed mph"
windSpeedInKmh="$windSpeed kmh"
windDirection=$(custom_winddirection)
shortForecast=$(custom_short_forecast)

printf '\n\n'
echo -e "Short forecast: ${BLUE}$shortForecast${NC} outside"
printf '\n'
if [ $temp -ge 85 ]; then
	echo -e "Forecasted temperature: ${RED}$temp$degreesInF${NC}" | sed 's/"//g'
elif [ $temp -gt 65 ] && [ $temp -lt 85 ]; then
	echo -e "Forecasted temperature: ${YELLOW}$temp$degreesInF${NC}" | sed 's/"//g'
elif [ $temp -le 65 ] && [ $temp -gt 55 ]; then
	echo -e "Forecasted temperature: ${GREEN}$temp$degreesInF${NC}" | sed 's/"//g'
else
	echo -e "Forecasted temperature: ${BLUE}$temp$degreesInF${NC}" | sed 's/"//g'
fi
printf '\n'
echo -e "Wind speed is forecasted to be around: ${BLUE}$windSpeedInMph${NC} $windDirection"
if [ "$dayTime" == "true" ]; then
	printf '\n\n\n'
else
	printf '\n\n\n\n'	
fi
forecast_user_prompt
}

forecast_display_header () {
if [ "$dayTime" == "true" ]; then
	if [ "$showKeys" == "true" ]; then
		echo -e -en "                               [${BLUE}F3${NC}] to hide controls"
		else
	printf '                               weatherapp live-view!'
		tod="today"
	fi
else
	if [ "$showKeys" == "true" ]; then
		echo -e -en "                               [${BLUE}F3${NC}] to hide controls"
		else
	printf "                               weatherapp live-view"
		tod="tonight"
	fi
fi
}

display_forecast_live () {
userLoc=$(get_coords)
timeStampTime=$(get_time_stamp_hour)
timeStampDate=$(get_time_stamp_date)
dayTime=$(get_daytime)
clear

forecast_display_header
time_of_day_gfx
userCwa=$(grep '"cwa": ..' weatherappinfo.txt | sed 's/^...............//' | sed 's/,//g')
userCity=$(grep '"city": ..' weatherappinfo.txt | sed 's/"//g' | sed 's/^....................//' | sed 's/.$//' | sed 's/: //' | tail -n1)
userState=$(grep '"state": ..' weatherappinfo.txt | sed 's/"//g' | sed 's/^.....................//' | sed 's/.$//' | sed 's/: //' | tail -n1)
printf '\n'
echo -e "your local NWS office is located in: ${BLUE}$userCity${NC}, ${BLUE}$userState${NC}" 
printf '\n'
echo -e "your local CWA is: ${BLUE}$userCwa${NC}, at points: ${BLUE}$userLoc${NC}" | sed 's/"//g'
printf '\n\n\n'
temp=$(get_temp)
degreesInF="° F"
degreesInC="° C"
windSpeed=$(get_windspeed)
windSpeedInMph="$windSpeed mph"
windSpeedInKmh="$windSpeed kmh"
windDirection=$(get_winddirection)
shortForecast=$(get_short_forecast)
echo -e "Displaying hourly forecast data for ${BLUE}$timeStampDate${NC} at ${BLUE}$timeStampTime${NC}"
if [ $temp -gt 85 ]; then
	printf '\n'
	echo -e "${BLUE}$shortForecast${NC} $tod, with a current temperature of ${RED}$temp$degreesInF${NC}" | sed 's/"//g'
elif [ $temp -gt 65 ] && [ $temp -lt 85 ]; then
	printf '\n'
	echo -e "${BLUE}$shortForecast${NC} $tod, with a current temperature of ${YELLOW}$temp$degreesInF${NC}" | sed 's/"//g'
elif [ $temp -lt 65 ] && [ $temp -gt 55 ]; then
	printf '\n'
	echo -e "${BLUE}$shortForecast${NC} $tod, with a current temperature of ${GREEN}$temp$degreesInF${NC}" | sed 's/"//g'
else
	printf '\n'
	echo -e "${BLUE}$shortForecast${NC} $tod, with a current temperature of ${BLUE}$temp$degreesInF${NC}" | sed 's/"//g'
fi
printf '\n'
echo -e "Wind speed: ${BLUE}$windSpeedInMph${NC} $windDirection"
if [ "$dayTime" != "true" ]; then
	printf '\n'	
fi
if [ "$showKeys" == "true" ]; then
	display_controls
else
	printf '\n\n\n\n\n'
	forecast_user_prompt
	# 
fi
}

time_of_day_gfx () {
dayTime=$(get_daytime)
if [ "$dayTime" == "true" ]; then
printf '\n'
local isDayTime="true"
echo -e "${YELLOW}                                                                      .     ."
echo -e "   		                                                       .###."
echo -e "		                                                   - - #  # - -"
echo -e "  	                                                              .###."
echo -e "  		                                                     .     .${NC}"
else
printf '\n'
local isDayTime="false"
echo -e "                                      			                \\\`"
echo -e "                                                                          |"
echo -e "                                                                        /,"
echo -e "                                                                         "
fi
}

custom_time_of_day_gfx () {
dayTime=$(custom_daytime)
if [ "$dayTime" == "true" ]; then
printf '\n'
local isDayTime="true"
echo -e "${YELLOW}                                                                      .     ."
echo -e "   		                                                       .###."
echo -e "		                                                   - - #  # - -"
echo -e "  	                                                              .###."
echo -e "  		                                                     .     .${NC}"
else
printf '\n'
local isDayTime="false"
echo -e "                                      			                \\\`"
echo -e "                                                                          |"
echo -e "                                                                        /,"
echo -e "                                                                         "
fi
}

get_date () {
local currentDate=$(current_date)
echo "$currentDate"
}

get_hour () {
local currentHour=$(current_hour)
echo $currentHour
}

set_time_stamp_date () {
timeStampDate=$(get_date)
DATEFILE=$workingDirectory/weatherapptimestampdate.txt
echo "$timeStampDate" > $DATEFILE
local retval=$(<$DATEFILE)
echo "$retval"
}

set_time_stamp_hour () {
timeStampHour=$(get_hour)
HOURFILE=$workingDirectory/weatherapptimestamphour.txt
echo "$timeStampHour" > $HOURFILE
local retval=$(<$HOURFILE)
echo "$retval"
}

get_time_stamp_date () {
DATEFILE=$workingDirectory/weatherapptimestampdate.txt
local retval=$(<$DATEFILE)
echo "$retval"
}

get_time_stamp_hour () {
HOURFILE=$workingDirectory/weatherapptimestamphour.txt
local retval=$(<$HOURFILE)
echo "$retval"
}

set_coords () { 
local userCoords=$(curl -s ipinfo.io | grep '"loc": ' | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g')
COORDSFILE=$workingDirectory/weatherappcoords.txt
echo "coords = $userCoords" > $COORDSFILE
}

get_coords () { 
local coords=$(grep 'coords = ' weatherappcoords.txt | sed 's/^.........//')
echo $coords
}

set_location_link () {
curl -s -H "$USERAGENT" https://api.weather.gov/points/$(get_coords) -o weatherappinfo.txt
}

get_location_link () { 
local userLoc=$(set_location_link)
echo $userLoc
}

#returns string for nws forecast api link, relevant to current user location
get_forecast_link () {
local retval=$(grep '"forecast": ' weatherappinfo.txt | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g' | sed 's/^........//')
echo $retval
}

set_forecast_link () { 
curl -s -H "$USERAGENT" $(get_forecast_link) -o weatherappinfoforecast.txt
}

#returns string value of last set coordinates
get_user_loc () { 
local retval=$(grep '"id": ' weatherappinfo.txt | sed 's/[^0-9,]//g' | sed -r 's/\s+//g' | sed 's/.$//')
echo "$retval"
}

get_hourly_forecast_link () {
local retval=$(grep '"forecastHourly": ' weatherappinfo.txt | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g' | sed 's/^..............//')
echo $retval
}

update_hourly_forecast () { 
curl -s -H "$USERAGENT" $(get_hourly_forecast_link) -o weatherappinfohourlyforecast.txt
errorCheck=$(grep -c '"Unexpected"' weatherappinfohourlyforecast.txt)
if [ $errorCheck -eq 1 ]; then 
	clear
	echo -e "weatherapp has encountered an ${RED}unexpected error${NC} and needs to run initial setup."
	sleep 2
	initial_setup
fi
}

set_weather_info () {
echo "Allow weatherapp to use location information? "
read -n3 -p "[y/n] " userChoice
	if [ "$userChoice" == "y" ]; then
		clear
		set_coords
		set_location_link
		update_hourly_forecast
		set_time_stamp_date
		set_time_stamp_hour
		display_forecast_live
	else 
		return[n]
	fi
}

# writes new timestamp and updates weather info, bypasses permissions
set_weather_info_fast () {
		update_hourly_forecast
		set_time_stamp_date
		set_time_stamp_hour
		clear
if [ $f5Press -eq 1 ]; then
		f5Press=0
		display_forecast_live
fi	
}


app_start () {
if [ $currentUser -eq 1 ]; then
 	check_status 
 	currentForecastNumber=$(get_forecast_number)
 	
 	display_forecast_live 		
else
	printf '\n\n\n\n'
	echo "                    Welcome to weatherapp, let's get started."
	printf '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'
	echo -e "press ${BLUE}enter${NC} to continue..."
	read -p 
	clear
	initial_setup
fi
}

workingDirectory=$(pwd)
pidFile=weatherappid
scriptLocation=weatherapp
currentTime=$(get_hour)
f5Press=0
pid=$(echo $$)
echo $pid > $pidFile
userInputValue=0
showKeys="false"
currentUser=$(check_user)
clear
app_start

echo -e "${GREEN}exit 0${NC}\n\n\n"
exit 0
