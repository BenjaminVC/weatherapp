#!/usr/bin/env bash
# TODO: add user-agent for NWS 
# TODO: set/get directory_name function for writing files to

# constants
RED='\033[0;31m'
GREEN='\033[1;32m'
NC='\033[0;00m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'

check_user () {
USER=/home/ben/weatherappprefs.txt
local retval=0
if [ -f $USER ]; then 
	retval=1
	echo $retval
else
	echo $retval
fi	
}

initial_setup () {
USERPREFS=/home/ben/weatherappprefs.txt
if [ -f "$USERPREFS" ]; then
	echo "OVERWRITE existing preferences?"
	printf '\n'
	read -p "[y/n] " userChoice
	if [ "$userChoice" == "y" ]; then
		rm -i -v weatherappprefs.txt
		initial_setup
	else
		echo "user preferences not changes"
	fi
else
	echo "Welcome to the weatherapp initial user setup."
	printf '\n\n\n\n\n\n'
	read -p "press enter to continue..."
	clear
	echo "weatherapp uses latitudinal and longitudinal geographic coordinates to 	access accurate weather information, provided by the NWS."
	printf '\n\n\n\n\n\n'
	echo "enter 'y' to allow the use of location information" 
	read -p "[y/n] " allowLocation
	printf '\n\n\n'
	echo "step [1/4] "
	if [ "$allowLocation" == "y" ]; then
		echo -e "Location permissions ${GREEN}accepted${NC}"		
		allowLocation="locPermission = 1" | echo "$allowLocation" > 		$USERPREFS
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	else
		allowLocation="locPermission = 0" | echo "$allowLocation" > 		$USERPREFS
		# force weatherapp to ask for longitude and latitude in this case
		echo -e "Location permissions ${RED}denied${NC}"
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	fi
	echo "step [2/4] "
	printf '\n\n'
	echo "Enable weatherapp to change terminal colors and themes based on time 		of day?" 
	read -p "[y/n] " allowTheme
	if [ "$allowTheme" == "y" ]; then
		allowTheme="themePermissions = 1" | echo "$allowTheme" > $USERPREFS
		echo -e "Colors and themes ${GREEN}enabled${NC}" 
		printf '\n\n'
		
		
		read -p "press enter to continue..."
		printf '\n\n\n'
		
		clear
	else
		allowTheme="themePermissions = 0" | echo "$allowTheme" > $USERPREFS
		echo -e "Colors and themes ${RED}disabled${NC}"
		
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	fi
	echo "Enable quickrun so that when weatherapp starts, it will immediately 		display the current forecast?" 
	read -p "[y/n] " allowQuickrun
	if [ "$allowQuickrun" == "y" ]; then 
		allowQuickrun="quickrunPermissions = 1" | echo "$allowQuickrun" > 			$USERPREFS
		echo -e "quickrun ${GREEN}enabled${NC}" 
		echo "step [3/4] "
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	else
		allowQuickrun="quickrunPermissions = 0" | echo "$allowQuickrun" > 			$USERPREFS
		echo -e "quickrun ${RED}disabled${NC}"
		echo "step [3/4] "
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	fi
	userDegrees="Farenheit"
	echo "The default unit of measurement for temperature is set to 			$userDegrees, do you want to save these changes?"
	printf '\n\n'
	echo "Enter 'y' to save changes or 'n' to switch to Celcius"
	read -p "[y/n] " allowFarenheit
	if [ "$allowFarenheit" == "y" ]; then
		allowFarenheit="farenheit = 1" | echo "$allowFarenheit" > $USERPREFS
		echo -e "Farenheit ${GREEN}enabled${NC}" 
		echo "step [4/4] "
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	else
		allowFarenheit="farenheit = 0" | echo "$allowFarenheit" > $USERPREFS
		echo -e "Farenheit ${RED}disabled${NC}" 
		echo "step [4/4] "
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	echo "Initial setup complete!"
	printf '\n\n\n\n'
	read -p "press enter to return to the MAIN-MENU"
	fi
fi
main_menu
}

#TODO: grep USERPREFS file to view and change initialized settings in terminal window 
main_menu() {
clear
echo -e "			${BLUE}       weatherapp MAIN-MENU${NC}"
printf '\n\n'
echo "Enter the corresponding number to select from the given options: "
printf '\n'
echo "1. User configuration file"
echo "2. Color and display"
echo "3. Quick view"
echo "4. Update weather"
echo -e "5. ${BLUE}return to forecast view${NC}"

read mainMenuOption
case $mainMenuOption in
1)
	clear
	echo "User configuration file options"
	printf '\n\n'
	if [ -f weatherappprefs.txt ]; then
		echo "Would you like to remove current user-configuration file?"
		printf '\n\n\n\n'
		read -p "[y/n] " userConfigChoice
		if [ "$userConfigChoice" == "y" ]; then 
			printf '\n\n'
			echo "Enter 'y' again to confirm"
			printf '\n\n\n'
			rm -i weatherappprefs.txt
			clear
			initial_setup
		else
			printf '\n\n\n\n\n'
			read -p "user confifuration file was not removed, press enter to return to MAIN-MENU"
			main_menu
		fi
	else 
		
		echo "User configuration file not found, running initial setup..."
		printf '\n\n'
		initial_setup
	fi
	;;
2)
	clear
	echo "Color and display options"
	;;
3)
	clear
	echo -e "			${BLUE}       Quick-View options${NC}"
	printf '\n'
	echo "Quick view allows weatherapp to immediately update and display the forecast. "
	printf '\n\n\n'
	echo "Enable quick-view?"
	read -p "[y/n]" quickViewEnable
		if [ "$quickViewEnable" == "y" ]; then
			printf '\n\n'
			echo -e "Quick-View ${GREEN}enabled${NC}"
			printf '\n\n\n\n\n\n\n\n\n\n\n\n'
			read -p "press enter to return to main-menu"
			main_menu
		fi
	;;
4)
	clear
	check_status
	;;
5)
	clear
	display_forecast
	;;
*)
	clear
	main_menu
esac
}
	
	
check_status () {		
FILE=/home/ben/weatherappinfo.txt
lastUpdated=$(get_time_stamp)
printf '\n\n\n\n'
if [ -f "$FILE" ]; then 
	echo "$FILE last fetched at $lastUpdated"
	printf '\n\n\n\n\n\n\n\n\n'
	echo "Update existing weather info?"
	printf '\n'
	read -p "[y/n] " userChoice
	if [ "$userChoice" == "y" ]; then
		set_weather_info
		if [$(grep '"status": 404' weatherinfo.txt)]; then
			echo "404... coordinates likely not supported."
		else
			echo "$FILE updated."
		fi
		clear
	else
		clear
		echo "$FILE not changed, using stored location information."
		
	fi
else 
	"$FILE does not exist, fetching info from weather.gov"
	set_weather_info 
fi
display_forecast
}

get_forecast_number () {
i=1
j=$i
tempNotFound=1
foreCastNumber=0
dateNotFound=1
timeSpanNotFound=1

currentDate=$(date +"%Y-%m-%d")
currentTime=$(date +"%H:%M")
hourlyForeCastTime="$currentDate"T"$currentTime"

hourlyForeCastDate=$(grep -m${i} ${currentDate} weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/^.................//' | tail -n1)


hourlyForeCastStartTimeHour=$(grep -m${i} '"startTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/^......................................//' | cut -c1-2 | tail -n1)
hourlyForeCastEndTimeHour=$(grep -m${i} '"endTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/^....................................//' | cut -c1-2 | tail -n1)
hourlyForeCastTimeHour=$(echo $hourlyForeCastTime | sed 's/^...........//' | cut -c1-2)
hourlyForeCastTimeMinutes=$(echo $hourlyForeCastTime | sed 's/^..............//' | cut -c1-2)



foundDate=$(echo $hourlyForeCastDate | cut -c1-10)

currentDate=$(echo $currentDate | cut -c1-10)

while [ $tempNotFound -eq 1 ]
do
	while [ $dateNotFound -eq 1 ] 
	do
		hourlyForeCastDate=$(grep -m${i} ${currentDate} weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/^.................//' | tail -n1)
		foundDate=$(echo $hourlyForeCastDate | cut -c1-10)
	currentDate=$(echo $currentDate | cut -c1-10)
		if [ "$currentDate" == "$foundDate" ]; then
		dateNotFound=0
		else
		((i++))
		fi
	done
	
hourlyForeCastStartTimeHour=$(grep -m${j} '"startTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/^......................................//' | cut -c1-2 | tail -n1)
hourlyForeCastEndTimeHour=$(grep -m${j} '"endTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/^....................................//' | cut -c1-2 | tail -n1)
	
	if [ $hourlyForeCastStartTimeHour -le $hourlyForeCastTimeHour ] && [ $hourlyForeCastTimeHour -le $hourlyForeCastEndTimeHour ]; then
			foreCastNumber=$j
			tempNotFound=0
	else
			((j++))
	fi
	
done
echo $j
}

get_temp () {
number=$(get_forecast_number)
local temp=$(grep -m${number} '"temperature": ..' weatherappinfohourlyforecast.txt | sed 's/^...............................//' | cut -c1-2 | tail -n1)
echo $temp
}

get_daytime () {
number=$(get_forecast_number)
local dayTime=$(grep -m${number} '"isDaytime": ..' weatherappinfohourlyforecast.txt | sed 's/^.............................//' | tail -n1 | sed 's/,//g')
echo $dayTime
}

get_windspeed () {
number=$(get_forecast_number)
local windSpeed=$(grep -m${number} '"windSpeed": ..' weatherappinfohourlyforecast.txt | sed 's/^..............................//' | cut -c1-2 | tail -n1 | sed 's/,//g')

echo $windSpeed
}

get_winddirection () {
number=$(get_forecast_number)
local windDirection=$(grep -m${number} '"windDirection": ..' weatherappinfohourlyforecast.txt | sed 's/^..................................//' | cut -c1-2 | tail -n1 | sed 's/,//g' | sed 's/"//g')
case $windDirection in
N)
	windDirection="North"
	;;
E)
	windDirection="East"
	;;
S)
	windDirection="South"
	;;
W)
	windDirection="West"
	;;
NE)
	windDirection="North-East"
	;;
SE)
	windDirection="South-East"
	;;
SW)
	windDirection="South-West"
	;;
NW)
	windDirection="North-West"
	;;
esac
echo $windDirection
}

get_short_forecast () {
number=$(get_forecast_number)
local shortForecast=$(grep -m${number} '"shortForecast": ..' weatherappinfohourlyforecast.txt | sed 's/^..................................//' | tail -n1 | sed 's/,//g' | sed 's/"//g' | sed 's/[{}]//g')
echo $shortForecast
}

display_forecast () {
time_of_day_gfx
echo "$hourlyForeCastTime"
userForecast=$(get_forecast)
userHourlyForecast=$(get_hourly_forecast)
userLoc=$(get_user_loc)
timeStampTime=$(get_time_stamp | sed 's/^................//')
timeStampDate=$(get_time_stamp | grep -oE "^.{1,12}\w*")
dayTime=$(get_daytime) 
if [ "$dayTime" == "true" ]; then
	printf '                       Welcome to daytime weatherapp!\n\n\n'
else
	printf '                       Welcome to night-time weatherapp\n\n\n'
fi
nwsOffice=$(grep -m1 '"cwa": ..' weatherappinfo.txt | sed 's/^...............//' | sed 's/,//g')

userCity=$(grep -m2 '"city": ..' weatherappinfo.txt | sed 's/"//g' | sed 's/^....................//' | sed 's/.$//' | sed 's/: //' | tail -n1)
userState=$(grep -m2 '"state": ..' weatherappinfo.txt | sed 's/"//g' | sed 's/^.....................//' | sed 's/.$//' | sed 's/: //' | tail -n1)
echo -e "your local NWS office is located in: ${BLUE}$userCity${NC}, ${BLUE}$userState${NC}" 
printf '\n'
echo -e "your local CWA is: ${BLUE}$nwsOffice${NC}, at points: ${BLUE}$userLoc${NC}" | sed 's/"//g'


#echo "your hourly forecast link is: " 
#echo -e "${BLUE}$userHourlyForecast${NC}"
printf '\n\n'

temp=$(get_temp)
degreesInF="° F"
degreesInC="° C"
windSpeed=$(get_windspeed)
windSpeedInMph="$windSpeed mph"
windSpeedInKmh="$windSpeed kmh"
windDirection=$(get_winddirection)
shortForecast=$(get_short_forecast)
echo -e "Displaying forecast data for ${BLUE}$timeStampDate${NC} at ${BLUE}$timeStampTime${NC}"
printf '\n'
echo -e "It's ${BLUE}$shortForecast${NC} outside"
if [ $temp -gt 85 ]; then
	echo -e "Current temperature: ${RED}$temp$degreesInF${NC}" | sed 's/"//g'
elif [ $temp -gt 65 ] && [ $temp -lt 85 ]; then
	echo -e "Current temperature: ${YELLOW}$temp$degreesInF${NC}" | sed 's/"//g'
elif [ $temp -lt 65 ] && [ $temp -gt 55 ]; then
	echo -e "Current temperature: ${GREEN}$temp$degreesInF${NC}" | sed 's/"//g'
else
	echo -e "Current temperature: ${BLUE}$temp$degreesInF${NC}" | sed 's/"//g'
fi

echo -e "Wind speed: ${BLUE}$windSpeedInMph${NC} blowing from the ${BLUE}$windDirection${NC}"
printf '\n\n\n\n'
read -p "press enter to exit or type m to go to main-menu: " userChoice
if [ "$userChoice" == "m" ]; then 
	main_menu
fi
}

time_of_day_gfx () {
clear
#local isDayTime=$(grep -m1 '"isDaytime": ..' weatherappinfoforecast.txt | sed 's/"//g' | sed 's/^...........................//' | sed 's/.$//')
hourNow=$(get_date | sed 's/^................//' |cut -c1-2)
meridianPosition=$(get_date | sed 's/^.........................//' |cut -c1-2)
if [ "$meridianPosition" == "AM" ] && [ $hourNow -ge 6 ]; then
local isDayTime="true"
echo -e "${YELLOW} 		                                                      .     ."
echo -e "   		                                                       .###."
echo -e "		                                                   - - #  # - -"
echo -e "  	                                                              .###."
echo -e "  		                                                     .     ."
echo -e "${NC}"
elif [ "$meridianPosition" == "AM" ] && [ $hourNow -le 6 ]; then 
printf '\n'
local isDayTime="false"
echo -e "                                      			                \\\`"
echo -e "                                                                          |"
echo -e "                                                                        /,"
echo -e "                                                                         "

elif [ "$meridianPosition" == "PM" ] && [ $hourNow -ge 8 ]; then
printf '\n'
local isDayTime="false"
echo -e "                                      			                \\\`"
echo -e "                                                                         |"
echo -e "                                                                        /,"
echo -e "                                                                         "

elif [ "$meridianPosition" == "AM" ] && [ $hourNow -ge 12 ]; then
printf '\n'
local isDayTime="false"
echo -e "                                      			                \\\`"
echo -e "                                                                          |"
echo -e "                                                                        /,"
echo -e "                                                                         "

else
echo -e "${YELLOW} 		                                                      .     ."
echo -e "   		                                                       .###."
echo -e "		                                                   - - #  # - -"
echo -e "  	                                                              .###."
echo -e "  		                                                     .     ."
echo -e "${NC}"
fi
}

get_date() {
var=$(date)
local retval=$(date)
echo "$retval"
}

set_time_stamp () {
timeStamp=$(get_date)
DATEFILE=/home/ben/weatherapptimestamp.txt 
echo "$timeStamp" > $DATEFILE
local retval=$(<$DATEFILE)
echo "$retval"
}

get_time_stamp () {
DATEFILE=/home/ben/weatherapptimestamp.txt 
local retval=$(<$DATEFILE)
echo "$retval"
}

set_weather_info () {
echo "Allow weatherapp to use location information? "
read -p "[y/n] " userChoice
	if [ "$userChoice" == "y" ]; then
		set_time_stamp
		clear
		userLoc=$(curl ipinfo.io | grep '"loc": ' | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g')
		curl https://api.weather.gov/points/$userLoc -o weatherappinfo.txt
		FILE2=/home/ben/weatherappinfoforecast.txt
		curl -s $userForecast -o weatherappinfoforecast.txt
		FILE3=/home/ben/weatherappinfohourlyforecast.txt
		curl -s $userHourlyForecast -o weatherappinfohourlyforecast.txt
		userForecast=$(grep '"forecast": ' weatherappinfo.txt | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g')
	else 
		return[n]
	fi
	
	echo $userCity
}

#returns string value of last saved coordinates
get_user_loc () { 
local retval=$(grep '"id": ' weatherappinfo.txt | sed 's/[^0-9,]//g' | sed -r 's/\s+//g' | sed 's/.$//')
echo "$retval"
}

#returns string value of nws forecast api link, relevant to current user location
get_forecast () {
local retval=$(grep '"forecast": ' weatherappinfo.txt | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g' | sed 's/^........//')
echo $retval
}

get_hourly_forecast () {
local retval=$(grep '"forecastHourly": ' weatherappinfo.txt | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g' | sed 's/^..............//')
echo $retval
}

get_weather_info () { 
userLoc=$(grep '"id": ' weatherappinfo.txt | sed 's/[^0-9,]//g' | sed -r 's/\s+//g' | sed 's/.$//')

curl https://api.weather.gov/points/$userLoc -o "weatherappinfo.txt"

userForecast=$(grep '"forecast": ' weatherappinfo.txt | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g')
}

#######################################################################################
#while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-11));echo -e "\e[31m`date +%r`\e[39m";tput rc;done &
#######################################################################################

clear



# Checks if a user configuration file has been created, if true weatherapp displays forecast, if not the user enters initial weatherapp setup
userAuth=$(check_user)
tempCheck=$(get_temp)
if [ $userAuth ]; then
# Controls day-time and night-time greeting and graphics
timeOfDay=$(time_of_day_gfx)
	if [ "$timeOfDay" == "true" ]; then
		echo "Welcome back to weatherapp!"
		printf '\n\n'
	else
		echo "Keeping it quiet..."
		printf '\n\n'
	fi
	
	display_forecast
else
	echo "Welcome to weatherapp, let's get started."
	printf '\n\n\n\n'
	read -p "press enter to continue..."
	clear
	initial_setup
fi
	




#TODO: rename file and make constant
#FILE2=/home/ben/weatherappinfoforecast.txt
#curl -s $userForecast -o weatherappinfoforecast.txt

#TODO: rename file and make constant
#FILE3=/home/ben/weatherappinfohourlyforecast.txt
#curl -s $userHourlyForecast -o weatherappinfohourlyforecast.txt



echo -e "${GREEN}exit 0${NC}\n\n\n"


exit 0
