#!/usr/bin/env bash

# TODO: set/get directory_name function for writing files to



# constants
USERAGENT="weatherapp for linux terminal, benvancise@gmail.com"
RED='\033[0;31m'
GREEN='\033[1;32m'
NC='\033[0;00m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
ARROWUP='\[A'
ARROWDOWN='\[B'
ARROWRIGHT='\[C'
ARROWLEFT='\[D'
MENU='m'
EXITTRUE=0
EXITFALSE=1


# Checks if a user configuration file has been created, returns 1 if found
check_user () {
USER=/home/ben/weatherappprefs.txt
local retval=0
if [ -f $USER ]; then 
	retval=1
	echo $retval
else
	echo $retval
fi	
}



get_temp () {
number=$(get_forecast_number)
local temp=$(grep -m${number} '"temperature": ..' weatherappinfohourlyforecast.txt | sed 's/^...............................//' | cut -c1-2 | tail -n1)
echo $temp
}



initial_setup () {
USERPREFS=/home/ben/weatherappprefs.txt
if [ -f "$USERPREFS" ]; then
	echo "OVERWRITE existing preferences?"
	printf '\n'
	read -p "[y/n] " userChoice
	if [ "$userChoice" == "y" ]; then
		rm -i -v weatherappprefs.txt
		main_menu
	else
		echo "user configuration not changed"
	fi
else
echo -e "		${BLUE}             weatherapp Initial Setup${NC}                 step [1/4]"

	printf '\n\n\n\n\n\n'
	echo "Welcome to the weatherapp initial user setup."
	printf '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'
	read -p "press enter to continue..."
	clear
	echo -e "		${BLUE}             weatherapp Initial Setup${NC}                 step [1/4]"
	printf '\n\n\n'
	echo "weatherapp uses latitudinal and longitudinal geographic coordinates to access"
	echo "accurate weather information, provided by the NWS."
	printf '\n\n\n\n\n\n\n\n\n'
	echo "enter 'y' to allow weatherapp to use location information" 
	read -p "[y/n] " allowLocation
	printf '\n\n'
	
	if [ "$allowLocation" == "y" ]; then
		echo -e "Location permissions ${GREEN}accepted${NC}"		
		userAllowGeoLocation="geoLocationPermissions = 1" 
		echo "$userAllowGeoLocation" >> $USERPREFS
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	else
		userAllowGeoLocation="geoLocationPermissions = 0" 
		echo "$userAllowGeoLocation" >> $USERPREFS
		# force weatherapp to ask for longitude and latitude in this case
		echo -e "Location permissions ${RED}denied${NC}"
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	fi
	echo -e "		${BLUE}             weatherapp Initial Setup${NC}                 step [2/4]"
	printf '\n\n'
	echo "Enable weatherapp to change terminal colors and themes based on time of day?" 
	read -p "[y/n] " allowTheme
	if [ "$allowTheme" == "y" ]; then
		userAllowTheme="allowTheme = 1" 
		echo "$userAllowTheme" >> $USERPREFS
		echo -e "Colors and themes ${GREEN}enabled${NC}" 
		printf '\n\n\n\n\n\n\n\n\n'
		
		
		read -p "press enter to continue..."
		
		clear
	else
		userAllowTheme="allowTheme = 0" 
		echo "$userAllowTheme" >> $USERPREFS
		echo -e "Colors and themes ${RED}disabled${NC}"
		
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	fi
	echo -e "		${BLUE}             weatherapp Initial Setup${NC}                 step [3/4]"
	printf '\n\n'
	echo "Enable quickrun so that when weatherapp starts, it will immediately display the current forecast?" 
	printf '\n\n'
	read -p "[y/n] " allowQuickrun
	if [ "$allowQuickrun" == "y" ]; then 
		userQuickRun="allowQuickRun = 1" 
		echo "$userQuickRun" >> $USERPREFS
		echo -e "quickrun ${GREEN}enabled${NC}" 
		printf '\n\n\n\n\n\n\n'
		read -p "press enter to continue..."
		clear
	else
		userQuickRun="allowQuickRun = 0" 
		echo "$userQuickRun" >> $USERPREFS
		echo -e "quickrun ${RED}disabled${NC}"
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	fi
	echo -e "		${BLUE}             weatherapp Initial Setup${NC}                 step [4/4]"
	printf '\n\n'
	userDegrees="Farenheit"
	echo "The default unit of measurement for temperature is set to $userDegrees, do you want to save these changes?"
	printf '\n\n'
	echo "Enter 'y' to save changes or 'n' to switch to Celcius"
	read -p "[y/n] " allowFarenheit
	if [ "$allowFarenheit" == "y" ]; then
		userAllowFarenheit="farenheit = 1" 
		echo "$userAllowFarenheit" >> $USERPREFS
		echo -e "Farenheit ${GREEN}enabled${NC}" 
		echo "step [4/4] "
		printf '\n\n\n\n\n\n\n\n\n\n'
		read -p "press enter to continue..."
		clear
	else
		userAllowFarenheit="farenheit = 0" 
		echo "$userAllowFarenheit" >> $USERPREFS
		echo -e "Farenheit ${RED}disabled${NC}" 
		echo "step [4/4] "
		printf '\n\n\n'
		read -p "press enter to continue..."
		clear
	echo "Initial setup complete!"
	printf '\n\n\n\n'
	read -p "press enter to return to the MAIN-MENU"
	fi
fi
main_menu
}

#TODO: grep USERPREFS file to view and change initialized settings in terminal window 
main_menu() {
clear
echo -e "			${BLUE}       weatherapp MAIN-MENU${NC}"
printf '\n\n'
echo "Enter the corresponding number to select from the given options: "
printf '\n'
echo "1. User configuration file"
echo "2. Keybindings"
echo "3. Quick view"
echo "4. Update weather"
echo -e "5. ${BLUE}return to forecast view${NC}"

read mainMenuOption
case $mainMenuOption in
1)
	clear
	echo -e "			${BLUE}       User configuration options${NC}"
	printf '\n\n'
	if [ -f weatherappprefs.txt ]; then
		echo "Would you like to remove current user-configuration file?"
		printf '\n\n\n\n'
		read -p "[y/n] " userConfigChoice
		if [ "$userConfigChoice" == "y" ]; then 
			printf '\n\n'
			echo "Enter 'y' again to confirm"
			printf '\n\n\n'
			rm -i weatherappprefs.txt
			clear
			main_menu
		else
			printf '\n\n\n\n\n'
			read -p "user confifuration file was not removed, press enter to return to MAIN-MENU"
			main_menu
		fi
	else 
		
		echo -e "User configuration file ${RED}not found${NC}, running initial setup..."
		printf '\n\n'
		sleep 2
		clear
		initial_setup
	fi
	;;
2)
	clear
	echo -e "			${BLUE}     Forecast view Keybindings${NC}"
	printf '\n\n\n\n\n\n'
	echo -e "'${BLUE}Up-arrow${NC}'    : Increment advanced-forecast view day"
	printf '\n'
	echo -e "'${BLUE}Down-arrow${NC}'  : Decrement advanced-forecast view day"
	printf '\n'
	echo -e "'${BLUE}Right-arrow${NC}' : Increment advanced-forecast view hour"
	printf '\n'
	echo -e "'${BLUE}Left-arrow${NC}'  : Decrement advanced-forecast view hour"
	printf '\n\n\n\n\n\n\n\n\n'
	read -p "press 'enter' to return to main-menu"
			main_menu
	;;
3)
	clear
	echo -e "			${BLUE}       Quick-View options${NC}"
	printf '\n'
	echo "Quick view allows weatherapp to immediately update and display the forecast. "
	printf '\n\n\n'
	echo "Enable quick-view?"
	read -p "[y/n]" quickViewEnable
		if [ "$quickViewEnable" == "y" ]; then
			printf '\n\n'
			echo -e "Quick-View ${GREEN}enabled${NC}"
			printf '\n\n\n\n\n\n\n\n\n\n\n\n'
			read -p "press enter to return to main-menu"
			main_menu
		fi
	;;
4)
	clear
	set_weather_info_fast
	;;
5)
	clear
	display_forecast_live
	;;
*)
	clear
	main_menu
esac
}
		
check_status () {		
FILE=/home/ben/weatherappinfo.txt
lastUpdated=$(get_time_stamp_date | sed 's/^.....//' | sed 's/-//g')
currentDate=$(get_current_date | sed 's/^.....//' | sed 's/-//g')
userAuth=$(check_user)
if [ $userAuth ]; then 
	if [ $currentDate -gt $lastUpdated ]; then
		set_weather_info_fast
	else
		clear
		echo "$FILE not changed, using stored location information..."
		sleep 2
		display_forecast_live
	fi
else 
	"$FILE does not exist, fetching info from weather.gov"
	set_weather_info 
fi
}

forecast_user_prompt () { 
printf 'press enter to exit or type m to go to main-menu:  '
read -n3 userChoice
	case $userChoice in
	$(echo -n "$userChoice" | grep "$MENU"))
		main_menu
		;;
	$(echo -n "$userChoice" | grep "$ARROWLEFT"))
		echo "forecast number before = $currentForecastNumber"
		currentForecastNumber=$((currentForecastNumber-1))
		userInputValue=$((userInputValue-1))
		echo "decremented, forecast number after = $currentForecastNumber"
display_advance_forecast
		;;
	$(echo -n "$userChoice" | grep "$ARROWRIGHT"))
		echo "forecast number before = $currentForecastNumber"
		currentForecastNumber=$((currentForecastNumber+1))
		userInputValue=$((userInputValue+1))
		echo "incremented, forecast number after = $currentForecastNumber"
		display_advance_forecast
		;;
	$(echo -n "$userChoice" | grep "$ARROWUP"))
		echo "up arrow"
		display_advance_forecast
		;;
	$(echo -n "$userChoice" | grep "$ARROWDOWN"))
		echo "down arrow"
		display_advance_forecast
		;;
	esac
	

}

#TODO: grep for minutes in current time, if current minute >= 3 foreCastNumber++
get_forecast_number () {
i=1
j=$i
tempNotFound=1
local foreCastNumber=0
dateNotFound=1
timeSpanNotFound=1
currentDate=$(date +"%Y-%m-%d")
currentTime=$(date +"%H:%M")
hourlyForeCastTime="$currentDate"T"$currentTime"
hourlyForeCastStartTimeHour=$(grep -m${i} '"startTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/^......................................//' | cut -c1-2 | tail -n1)
hourlyForeCastEndTimeHour=$(grep -m${i} '"endTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/^....................................//' | cut -c1-2 | tail -n1)
hourlyForeCastTimeHour=$(echo $hourlyForeCastTime | sed 's/^...........//' | cut -c1-2)

hourlyForeCastTimeMinutes=$(echo $hourlyForeCastTime | sed 's/^..............//' | cut -c1-2)
while [ $tempNotFound -eq 1 ]
do	
	while [ $dateNotFound -eq 1 ] 
	do
	hourlyForeCastDate=$(grep -m${i} '"startTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/startTime//g' | sed 's/endTime//g' | sed 's/://g' | tail -n1  | sed s'/^.................//' | cut -c1-10)
		if [ "$currentDate" == "$hourlyForeCastDate" ]; then
		j=$i
			dateNotFound=0
		else
			((i++))
		fi	
	done		
hourlyForeCastStartTimeHour=$(grep -m${j} '"startTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/^......................................//' | cut -c1-2 | tail -n1)
hourlyForeCastEndTimeHour=$(grep -m${j} '"endTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/^....................................//' | cut -c1-2 | tail -n1)
	if [ $hourlyForeCastStartTimeHour -le $hourlyForeCastTimeHour ] && [ $hourlyForeCastTimeHour -le $hourlyForeCastEndTimeHour ]; then
			foreCastNumber=$j
			tempNotFound=0
	else
			((j++))
	fi	
done
echo $foreCastNumber
}

current_date () {
local currentDate=$(date +"%Y-%m-%d")
echo $currentDate
}

current_hour () {
local currentTime=$(date +"%H:%M")
echo "$currentTime"
}

get_temp () {
number=$(get_forecast_number)
local temp=$(grep -m${number} '"temperature": ..' weatherappinfohourlyforecast.txt | sed 's/^...............................//' | cut -c1-2 | tail -n1)
echo $temp
}

get_daytime () {
number=$(get_forecast_number)
local dayTime=$(grep -m${number} '"isDaytime": ..' weatherappinfohourlyforecast.txt | sed 's/^.............................//' | tail -n1 | sed 's/,//g')
echo $dayTime
}

get_windspeed () {
number=$(get_forecast_number)
local windSpeed=$(grep -m${number} '"windSpeed": ..' weatherappinfohourlyforecast.txt | sed 's/^..............................//' | cut -c1-2 | tail -n1 | sed 's/,//g')

echo $windSpeed
}

get_winddirection () {
number=$(get_forecast_number)
local windDirection=$(grep -m${number} '"windDirection": ..' weatherappinfohourlyforecast.txt | sed 's/^..................................//' | cut -c1-3 | tail -n1 | sed 's/,//g' | sed 's/"//g')
case $windDirection in
N)
	windDirection="blowing from the ${BLUE}North${NC}"
	;;
E)
	windDirection="blowing from the ${BLUE}East${NC}"
	;;
S)
	windDirection="blowing from the ${BLUE}South${NC}"
	;;
W)
	windDirection="blowing from the ${BLUE}West${NC}"
	;;
NE)
	windDirection="blowing from the ${BLUE}North-East${NC}"
	;;
SE)
	windDirection="blowing from the ${BLUE}South-East${NC}"
	;;
SW)
	windDirection="blowing from the ${BLUE}South-West${NC}"
	;;
NW)
	windDirection="blowing from the ${BLUE}North-West${NC}"
	;;
NNE)
	windDirection="blowing from the ${BLUE}North-Northeast${NC}"
	;;
ENE)
	windDirection="blowing from the ${BLUE}East-Northeast${NC}"
	;;
ESE)
	windDirection="blowing from the ${BLUE}East-Southeast${NC}"
	;;
SSE)
	windDirection="blowing from the ${BLUE}South-Southeast${NC}"
	;;
SSW)
	windDirection="blowing from the ${BLUE}South-Southwest${NC}"
	;;
WSW)
	windDirection="blowing from the ${BLUE}West-Southwest${NC}"
	;;
WNW)
	windDirection="blowing from the ${BLUE}West-Northwest${NC}"
	;;
NNW)
	windDirection="blowing from the ${BLUE}North-Northwest${NC}"
	;;
VAR)
	windDirection="with ${BLUE}variable wind direction${NC}"
	;;
CLM)
	windDirection="with ${BLUE}calm winds${NC}"
	;;
ALL)
	windDirection="at ${BLUE}all direction categories combined${NC}"
	;;
esac
echo $windDirection
}

get_short_forecast () {
number=$(get_forecast_number)
local shortForecast=$(grep -m${number} '"shortForecast": ..' weatherappinfohourlyforecast.txt | sed 's/^..................................//' | tail -n1 | sed 's/,//g' | sed 's/"//g' | sed 's/[{}]//g')
echo $shortForecast
}

custom_forecast_temp () { 
number=$currentForecastNumber
local temp=$(grep -m${number} '"temperature": ..' weatherappinfohourlyforecast.txt | sed 's/^...............................//' | cut -c1-2 | tail -n1)
echo $temp
}

custom_daytime () {
number=$currentForecastNumber
local dayTime=$(grep -m${number} '"isDaytime": ..' weatherappinfohourlyforecast.txt | sed 's/^.............................//' | tail -n1 | sed 's/,//g')
echo $dayTime
}

custom_hour () {
number=$currentForecastNumber
local hourlyForeCastStartTimeHour=$(grep -m${number} '"startTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/^......................................//' | cut -c1-5 | tail -n1)
echo $hourlyForeCastStartTimeHour
}

custom_day () {
number=$currentForecastNumber
local hourlyForeCastDate=$(grep -m${number} '"startTime": ' weatherappinfohourlyforecast.txt | sed 's/"//g' | sed 's/.$//' | sed 's/startTime//g' | sed 's/endTime//g' | sed 's/://g' | tail -n1  | sed s'/^.................//' | cut -c1-10)
echo $hourlyForeCastDate
}

custom_winddirection () {
number=$currentForecastNumber
local windDirection=$(grep -m${number} '"windDirection": ..' weatherappinfohourlyforecast.txt | sed 's/^..................................//' | cut -c1-3 | tail -n1 | sed 's/,//g' | sed 's/"//g')
case $windDirection in
N)
	windDirection="blowing from the ${BLUE}North${NC}"
	;;
E)
	windDirection="blowing from the ${BLUE}East${NC}"
	;;
S)
	windDirection="blowing from the ${BLUE}South${NC}"
	;;
W)
	windDirection="blowing from the ${BLUE}West${NC}"
	;;
NE)
	windDirection="blowing from the ${BLUE}North-East${NC}"
	;;
SE)
	windDirection="blowing from the ${BLUE}South-East${NC}"
	;;
SW)
	windDirection="blowing from the ${BLUE}South-West${NC}"
	;;
NW)
	windDirection="blowing from the ${BLUE}North-West${NC}"
	;;
NNE)
	windDirection="blowing from the ${BLUE}North-Northeast${NC}"
	;;
ENE)
	windDirection="blowing from the ${BLUE}East-Northeast${NC}"
	;;
ESE)
	windDirection="blowing from the ${BLUE}East-Southeast${NC}"
	;;
SSE)
	windDirection="blowing from the ${BLUE}South-Southeast${NC}"
	;;
SSW)
	windDirection="blowing from the ${BLUE}South-Southwest${NC}"
	;;
WSW)
	windDirection="blowing from the ${BLUE}West-Southwest${NC}"
	;;
WNW)
	windDirection="blowing from the ${BLUE}West-Northwest${NC}"
	;;
NNW)
	windDirection="blowing from the ${BLUE}North-Northwest${NC}"
	;;
VAR)
	windDirection="with ${BLUE}variable wind direction${NC}"
	;;
CLM)
	windDirection="with ${BLUE}calm winds${NC}"
	;;
ALL)
	windDirection="at ${BLUE}all direction categories combined${NC}"
	;;
esac
echo $windDirection
}

custom_windspeed () {
number=$currentForecastNumber
local windSpeed=$(grep -m${number} '"windSpeed": ..' weatherappinfohourlyforecast.txt | sed 's/^..............................//' | cut -c1-2 | tail -n1 | sed 's/,//g')

echo $windSpeed
}

custom_short_forecast () {
number=$currentForecastNumber
local shortForecast=$(grep -m${number} '"shortForecast": ..' weatherappinfohourlyforecast.txt | sed 's/^..................................//' | tail -n1 | sed 's/,//g' | sed 's/"//g' | sed 's/[{}]//g')
echo $shortForecast
}

#prev_forecast_hour () {

#}

#custom_forecast_day () {

#}

#prev_forecast_day () {

#}

display_advance_forecast () {
clear
printf '                           weatherapp advanced-forecast view'
userForecast=$(get_forecast_link)
userHourlyForecast=$(get_hourly_forecast_link)
userLoc=$(get_coords)
customHour=$(custom_hour)
echo $customHour
customDay=$(custom_day)
dayTime=$(custom_daytime) 
custom_time_of_day_gfx
userCwa=$(grep '"cwa": ..' weatherappinfo.txt | sed 's/^...............//' | sed 's/,//g')

userCity=$(grep '"city": ..' weatherappinfo.txt | sed 's/"//g' | sed 's/^....................//' | sed 's/.$//' | sed 's/: //' | tail -n1)
userState=$(grep '"state": ..' weatherappinfo.txt | sed 's/"//g' | sed 's/^.....................//' | sed 's/.$//' | sed 's/: //' | tail -n1)
echo -e "your local NWS office is located in: ${BLUE}$userCity${NC}, ${BLUE}$userState${NC}" 
printf '\n'
echo -e "your local CWA is: ${BLUE}$userCwa${NC}, at points: ${BLUE}$userLoc${NC}" | sed 's/"//g'
printf '\n\n\n'
temp=$(custom_forecast_temp)
degreesInF="° F"
degreesInC="° C"
windSpeed=$(custom_windspeed)
windSpeedInMph="$windSpeed mph"
windSpeedInKmh="$windSpeed kmh"
windDirection=$(custom_winddirection)
shortForecast=$(custom_short_forecast)
echo -e "Displaying forecast data for ${BLUE}$customDay${NC} at ${BLUE}$customHour${NC}"
printf '\n\n'
echo -e "It looks like it will be ${BLUE}$shortForecast${NC} outside"
if [ $temp -gt 85 ]; then
	echo -e "With a temperature around: ${RED}$temp$degreesInF${NC}" | sed 's/"//g'
elif [ $temp -gt 65 ] && [ $temp -lt 85 ]; then
	echo -e "With a temperature around: ${YELLOW}$temp$degreesInF${NC}" | sed 's/"//g'
elif [ $temp -lt 65 ] && [ $temp -gt 55 ]; then
	echo -e "With a temperature around: ${GREEN}$temp$degreesInF${NC}" | sed 's/"//g'
else
	echo -e "With a temperature around: ${BLUE}$temp$degreesInF${NC}" | sed 's/"//g'
fi
echo -e "Wind speed is forecasted to be around: ${BLUE}$windSpeedInMph${NC} $windDirection"
printf '\n\n\n\n\n\n'
forecast_user_prompt
}

display_forecast_live () {
clear
userForecast=$(get_forecast_link)
userHourlyForecast=$(get_hourly_forecast_link)
userLoc=$(get_coords)
timeStampTime=$(get_time_stamp_hour)
timeStampDate=$(get_time_stamp_date)
dayTime=$(get_daytime) 
if [ "$dayTime" == "true" ]; then
	printf '                     Good day, welcome to weatherapp live-view!'
else
	printf "                               weatherapp live-view"
fi
time_of_day_gfx
userCwa=$(grep '"cwa": ..' weatherappinfo.txt | sed 's/^...............//' | sed 's/,//g')

userCity=$(grep '"city": ..' weatherappinfo.txt | sed 's/"//g' | sed 's/^....................//' | sed 's/.$//' | sed 's/: //' | tail -n1)
userState=$(grep '"state": ..' weatherappinfo.txt | sed 's/"//g' | sed 's/^.....................//' | sed 's/.$//' | sed 's/: //' | tail -n1)
printf '\n'
echo -e "your local NWS office is located in: ${BLUE}$userCity${NC}, ${BLUE}$userState${NC}" 
printf '\n'
echo -e "your local CWA is: ${BLUE}$userCwa${NC}, at points: ${BLUE}$userLoc${NC}" | sed 's/"//g'
printf '\n\n\n'
temp=$(get_temp)
degreesInF="° F"
degreesInC="° C"
windSpeed=$(get_windspeed)
windSpeedInMph="$windSpeed mph"
windSpeedInKmh="$windSpeed kmh"
windDirection=$(get_winddirection)
shortForecast=$(get_short_forecast)
echo -e "Displaying forecast data for ${BLUE}$timeStampDate${NC} at ${BLUE}$timeStampTime${NC}"
printf '\n\n'
echo -e "It's ${BLUE}$shortForecast${NC} outside"
if [ $temp -gt 85 ]; then
	echo -e "Current temperature: ${RED}$temp$degreesInF${NC}" | sed 's/"//g'
elif [ $temp -gt 65 ] && [ $temp -lt 85 ]; then
	echo -e "Current temperature: ${YELLOW}$temp$degreesInF${NC}" | sed 's/"//g'
elif [ $temp -lt 65 ] && [ $temp -gt 55 ]; then
	echo -e "Current temperature: ${GREEN}$temp$degreesInF${NC}" | sed 's/"//g'
else
	echo -e "Current temperature: ${BLUE}$temp$degreesInF${NC}" | sed 's/"//g'
fi
echo -e "Wind speed: ${BLUE}$windSpeedInMph${NC} $windDirection"
printf '\n\n\n\n\n'
(sleep 35m && set_weather_info_fast)&
forecast_user_prompt
}

time_of_day_gfx () {
dayTime=$(get_daytime)
if [ "$dayTime" == "true" ]; then
printf '\n'
local isDayTime="true"
echo -e "${YELLOW}                                                                      .     ."
echo -e "   		                                                       .###."
echo -e "		                                                   - - #  # - -"
echo -e "  	                                                              .###."
echo -e "  		                                                     .     .${NC}"
else
printf '\n'
local isDayTime="false"
echo -e "                                      			                \\\`"
echo -e "                                                                          |"
echo -e "                                                                        /,"
echo -e "                                                                         "
fi
}

custom_time_of_day_gfx () {
dayTime=$(custom_daytime)
if [ "$dayTime" == "true" ]; then
printf '\n'
local isDayTime="true"
echo -e "${YELLOW}                                                                      .     ."
echo -e "   		                                                       .###."
echo -e "		                                                   - - #  # - -"
echo -e "  	                                                              .###."
echo -e "  		                                                     .     .${NC}"
else
printf '\n'
local isDayTime="false"
echo -e "                                      			                \\\`"
echo -e "                                                                          |"
echo -e "                                                                        /,"
echo -e "                                                                         "
fi
}

get_date () {
local currentDate=$(current_date)
echo "$currentDate"
}

get_hour () {
local currentHour=$(current_hour)
echo $currentHour
}

set_time_stamp_date () {
timeStampDate=$(get_date)
DATEFILE=/home/ben/weatherapptimestampdate.txt 
echo "$timeStampDate" > $DATEFILE
local retval=$(<$DATEFILE)
echo "$retval"
}

set_time_stamp_hour () {
timeStampHour=$(get_hour)
HOURFILE=/home/ben/weatherapptimestamphour.txt 
echo "$timeStampHour" > $HOURFILE
local retval=$(<$HOURFILE)
echo "$retval"
}

get_time_stamp_date () {
DATEFILE=/home/ben/weatherapptimestampdate.txt 
local retval=$(<$DATEFILE)
echo "$retval"
}

get_time_stamp_hour () {
HOURFILE=/home/ben/weatherapptimestamphour.txt 
local retval=$(<$HOURFILE)
echo "$retval"
}

set_coords () { 
local userCoords=$(curl -s ipinfo.io | grep '"loc": ' | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g')
COORDSFILE=/home/ben/weatherappcoords.txt
echo "coords = $userCoords" > $COORDSFILE
}

get_coords () { 
local coords=$(grep 'coords = ' weatherappcoords.txt | sed 's/^.........//')
echo $coords
}

set_location_link () {
curl -s --user-agent "$USERAGENT" https://api.weather.gov/points/$(get_coords) -o weatherappinfo.txt
}

get_location_link () { 
local userLoc=$(set_location_link)
echo $userLoc
}

#returns string for nws forecast api link, relevant to current user location
get_forecast_link () {
local retval=$(grep '"forecast": ' weatherappinfo.txt | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g' | sed 's/^........//')
echo $retval
}

set_forecast_link () { 
curl -s --user-agent "$USERAGENT" $(get_forecast_link) -o weatherappinfoforecast.txt
}

#returns string value of last set coordinates
get_user_loc () { 
local retval=$(grep '"id": ' weatherappinfo.txt | sed 's/[^0-9,]//g' | sed -r 's/\s+//g' | sed 's/.$//')
echo "$retval"
}

get_hourly_forecast_link () {
local retval=$(grep '"forecastHourly": ' weatherappinfo.txt | sed 's/"//g' | sed 's/loc//g' | sed 's/.$//' | sed 's/: //' | sed -r 's/\s+//g' | sed 's/^..............//')
echo $retval
}

set_weather_info () {
echo "Allow weatherapp to use location information? "
read -p "[y/n] " userChoice
	if [ "$userChoice" == "y" ]; then
		clear
		set_coords
		set_location_link
		set_forecast_link 
		set_time_stamp_date
		set_time_stamp_hour
		display_forecast_live
	else 
		return[n]
	fi
}

# sets weather info and bypasses permissions
set_weather_info_fast () {
		set_coords
		set_location_link
		set_forecast_link 
		set_time_stamp_date
		set_time_stamp_hour
		clear
		display_forecast_live
}

#######################################################################################
#######################################################################################
currentForecastNumber=$(get_forecast_number)
userInputValue=0
currentUser=$(check_user)
clear
if [ $currentUser -eq 1 ]; then
 	check_status		
else
	printf '\n\n\n\n'
	echo "                    Welcome to weatherapp, let's get started."
	printf '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'
	echo -e "press ${BLUE}enter${NC} to continue..."
	read -p 
	clear
	initial_setup
fi
echo -e "${GREEN}exit 0${NC}\n\n\n"

exit 0
